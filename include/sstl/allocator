// -*- C++ -*-
#ifndef _SSTL__ALLOCATOR_INCLUDED
#define _SSTL__ALLOCATOR_INCLUDED

#include "sstl_common.h"
#include "atomic"
#include "iterator"
#include "algorithm"
#include "limits"

namespace SSTL_NAMESPACE {

// SSTL allocator is not standard as it takes care of sequences, not individual objects

/// Base allocator, parametrized each different size of object
///
/// Many of methods of this class are out-line, and this very same allocator instance is reused
/// for many types of the same size. For example, all collections of pointers
/// are going to use the same instance.
/// When data size is a power of two, the compiler will replace multiplication with shift.
///
template
   <sstl_size_type S>
class allocator_base
{
public:

    /// Minimum possible allocator size
    ///
    /// Depends on the obect size as follows:
    ///   - if object size is 1 byte minimum_capacity is 16
    ///   - if object size is 2 bytes minimum_capacity is 8
    ///   - in all other cases the minimum capacity is 4 elements
    /// Therefore, if not counting an awkward case of 3-byte sizeof, no less than 16 bytes are allocated.
    ///
    static const sstl_size_type minimum_capacity = (S <= 2) ? (16 / S) : 4;

public:
    allocator_base() : _buffer(NULL), _size(0), _capacity(0) {}

    ~allocator_base() { delete [] _buffer; }

    void operator=(const allocator_base<S>& v);
    bool operator==(const allocator_base<S>& v) const;
    bool operator!=(const allocator_base<S>& v) const {return !operator==(v);}

    char* at(sstl_size_type n)
    {
        SSTL_ASSERT(n < _size);
        return _buffer + (_size * S);
    }

    const char* at(sstl_size_type n) const
    {
        SSTL_ASSERT(n < _size);
        return _buffer + (_size * S);
    }

    char* begin() {return _buffer;}
    char* end()   {return _buffer + (_size * S);}

    const char* cbegin() const {return _buffer;}
    const char* cend() const   {return _buffer + (_size * S);}

    sstl_size_type size() const {return _size;}
    sstl_size_type capacity() const {return _capacity;}

    static SSTL_CONSTEXPR sstl_size_type max_size() {return numeric_limits<sstl_size_type>::max() / S;}

    void reserve(sstl_size_type n);

    void shrink_to_fit();

    char* insert_uninitialized(sstl_size_type n, sstl_size_type count);
    char* append_uninitialized(sstl_size_type count);
    void insert(sstl_size_type n, sstl_size_type count, const void* buff);
    void append(sstl_size_type count, const void* buff);

    void clear() {_size = 0;}
    void shrink(sstl_size_type new_size)
    {
        SSTL_ASSERT(new_size <= _size);
        _size = new_size;
    }
    void erase(sstl_size_type n, sstl_size_type count);

    void swap(allocator_base<S>& other)
    {
        // Also works for the rare case of &other == this
        SSTL_NAMESPACE::swap(other._buffer, _buffer);
        SSTL_NAMESPACE::swap(other._size, _size);
        SSTL_NAMESPACE::swap(other._capacity, _capacity);
    }

private:

    inline sstl_size_type _adjust_capacity(sstl_size_type size)
    {
        if (size < minimum_capacity)
            size = minimum_capacity;
        else // below is a well-known trickery of adjusting size up to the nearest power of two
        {
            --size;
            size |= size >> 1;
            size |= size >> 2;
            size |= size >> 4;
            size |= size >> 8;
            size |= size >> 16;
            ++size;
        }
        return size;
    }

private:

    allocator_base(const allocator_base&) SSTL_MEMBER_DELETE;

protected:

    char* _buffer;
    sstl_size_type _size;
    sstl_size_type _capacity;
};

/// Data allocator for POD data types (Plain old data)
///
/// This allocator is suitable for sequences of items that corespond to definition of POD.
/// They should have no constructor or destructor, should be movable in memory,
/// and their initialization is done by zeroing them out.
///
/// The implementation is a thin type casting layer above the typed allocator,
/// and moving and copying of items is efficiently done by moving memory.
///
template
   <typename T>
class allocator_pod : public allocator_base<sizeof(T)>
{
public:

    typedef allocator_base<sizeof(T)> abase;
    typedef T*       iterator;
    typedef const T* const_iterator;

public:
    allocator_pod() : abase() {}

    ~allocator_pod() {}

    void operator=(const allocator_pod& v) {abase::operator=(v);}

    bool operator==(const allocator_pod& v) const {return abase::operator==(v);}
    bool operator!=(const allocator_pod& v) const {return abase::operator!=(v);}

    T&       at(sstl_size_type n)        {return *reinterpret_cast<T*>(abase::at(n));}
    const T& at(sstl_size_type n) const  {return *reinterpret_cast<const T*>(abase::at(n));}

    iterator begin() {return reinterpret_cast<iterator>(abase::begin());}
    iterator end()   {return reinterpret_cast<iterator>(abase::end());}

    const_iterator cbegin() const {return reinterpret_cast<const_iterator>(abase::begin());}
    const_iterator cend() const   {return reinterpret_cast<const_iterator>(abase::end());}

    iterator insert_uninitialized(sstl_size_type n, sstl_size_type count)
    {
        return reinterpret_cast<iterator>(abase::insert_uninitialized(n, count));
    }

    iterator append_uninitialized(sstl_size_type n)
    {
        return reinterpret_cast<iterator>(abase::append_uninitialized(n));
    }

    void insert(sstl_size_type n, sstl_size_type count, const T* buff)
    {
        return reinterpret_cast<iterator>(abase::insert(n, count, static_cast<void*>(buff)));
    }

    void append(sstl_size_type count, const T* buff)
    {
        return reinterpret_cast<iterator>(abase::append(count, static_cast<void*>(buff)));
    }

    void assign(const_iterator first, const_iterator last)
    {
        SSTL_ASSERT(first <= last);
        clear();
        append(static_cast<sstl_size_type>(last - first), first);
    }

    void assign(iterator first, iterator last)
    {
        assign(static_cast<const_iterator>(first), static_cast<const_iterator>(last));
    }

    template
        <class Iter>
    void assign(Iter first, Iter last)
    {
        SSTL_ASSERT(first <= last);
        clear();
        iterator it = abase::append_uninitialized(last - first);
        for ( ; last != first; ++first, ++it)
            *it = *first;
    }

    void clear()
    {
        abase::clear();
    }
};

/// Data allocator for complex data types with nontrivial constructor, destructor, etc.
///
template
   <typename T>
class allocator : public allocator_pod<T>
{
public:

    typedef allocator_base<sizeof(T)> apod;

public:

    allocator() : apod() {}
    ~allocator() {}

    void operator=(const allocator& v)
    {
        if (this != &v)
        {
            clear();
            iterator this_it = append_uninitialized(v._size);
            const_iterator it = v.begin();
            const_iterator it_end = v.end();
            for ( ; it != it_end; ++it, ++this_it)
                *this_it = *it;
        }
        return true;
    }

    bool operator==(const allocator& v) const
    {
        if (this != &v)
        {
            if (abase::_size != v._size)
                return false;
            const_iterator it = abase::begin();
            const_iterator itEnd = abase::end();
            const_iterator itOther = v.begin();
            for ( ; it != itEnd; ++it, ++itOther)
                if (*it != itOther)
                    return false;
        }
        return true;
    }

    bool operator!=(const allocator& v) const {return !operator==(v);}

    void clear();
    iterator insert_uninitialized(sstl_size_type n, sstl_size_type count) {return reinterpret_cast<iterator>(abase::insert_uninitialized(n, count));}
    iterator append_uninitialized(sstl_size_type n) {return reinterpret_cast<iterator>(abase::grow(n));}

private:

    static void _destroy_item(const_iterator it)
    {
        (*it).T::~T();
    }

    static void _destroy_items(const_iterator first, const_iterator last)
    {
        for (; first < last; ++first)
            _destroy_item(first);
    }
};


// IMPLEMENTATION:

template
   <sstl_size_type S>
void allocator_base<S>::operator=(const allocator_base<S>& v)
{
    if (&v != this)
    {
        const sstl_size_type size_of = v._size * S;
        if (_capacity < v._size)
        {
            delete [] _buffer;
            _buffer = new char[size_of];
            _capacity = v._size;
        }
        _size = v._size;
        memcpy(_buffer, v._buffer, size_of);
    }
}

template
   <sstl_size_type S>
bool allocator_base<S>::operator==(const allocator_base<S>& v) const
{
    if (&v == this)
        return true;
    if (v._size != _size)
        return false;
    return memcmp(_buffer, v._buffer, _size * S) == 0;
}

template
   <sstl_size_type S>
void allocator_base<S>::reserve(sstl_size_type n)
{
    if (n > _capacity)
    {
        char* b = new char[n * S];
        memcpy(b, _buffer, _size * S);
        delete [] _buffer;
        _buffer = b;
        _capacity = n;
    }
}

template
   <sstl_size_type S>
void allocator_base<S>::shrink_to_fit()
{
    if (_size < _capacity)
    {
        if (_size == 0)
        {
            delete [] _buffer;
            _buffer = NULL;
        }
        else
        {
            const sstl_size_type size_of = _size * S;
            char* b = new char[size_of];
            memcpy(b, _buffer, size_of);
            delete [] _buffer;
            _buffer = b;
        }
        _capacity = _size;
    }
}

template
   <sstl_size_type S>
char* allocator_base<S>::insert_uninitialized(sstl_size_type n, sstl_size_type count)
{
    const sstl_size_type new_size = _size + count;
    const sstl_size_type offset_n = n * S;
    const sstl_size_type offset_count = count * S;
    if (new_size > _capacity)
    {
        sstl_size_type new_capacity = _adjust_capacity(new_size);
        char* b = new char[new_capacity * S];
        memcpy(b, _buffer, offset_n);
        memcpy(b + offset_n + offset_count, _buffer + offset_n, (_size - count) * S);
        delete [] _buffer;
        _buffer = b;
        _capacity = new_capacity;
    }
    else
        memmove(_buffer + offset_n + offset_count, _buffer + offset_n, (_size - count) * S);
    _size = new_size;
    return _buffer + offset_n;
}

template
   <sstl_size_type S>
char* allocator_base<S>::append_uninitialized(sstl_size_type count)
{
    const sstl_size_type offset_n = _size * S;
    const sstl_size_type new_size = _size + count;
    if (new_size > _capacity)
    {
        sstl_size_type new_capacity = _adjust_capacity(new_size);
        char* b = new char[new_capacity * S];
        memcpy(b, _buffer, offset_n);
        delete [] _buffer;
        _buffer = b;
        _capacity = new_capacity;
    }
    _size = new_size;
    return _buffer + offset_n;
}

template
   <sstl_size_type S>
void allocator_base<S>::insert(sstl_size_type n, sstl_size_type count, void* buff)
{
    void* dest = insert_uninitialized(n, count);
    memcpy(dest, buff, count * S);
}

template
   <sstl_size_type S>
void allocator_base<S>::append(sstl_size_type count, void* buff)
{
    void* dest = append_uninitialized(count);
    memcpy(dest, buff, count * S);
}

template
   <sstl_size_type S>
void allocator_base<S>::erase(sstl_size_type n, sstl_size_type count)
{
    SSTL_ASSERT(n + count <= _size);
    const sstl_size_type offset = (n + count) * S;
    memmove(_buffer + n, _buffer + offset, _size * S - offset);
}

} // namespace

#endif
