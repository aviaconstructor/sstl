// -*- C++ -*-
#ifndef _SSTL__VECTOR_INCLUDED
#define _SSTL__VECTOR_INCLUDED

#include "sstl_common.h"
#include "atomic"
#include "iterator"
#include "allocator"

namespace SSTL_NAMESPACE {

// Differences:
//   - non-standard allocator
//   - vector::data() cannot be implemented for non-movable types

template
    <class T, class A>
class vector
{
public:
    typedef typename T value_type;
    typedef typename A allocator_type;
    typedef sstl_size_type size_type;
    typedef sstl_difference_type difference_type;
    typedef typename T& reference;
    typedef const typename T& const_reference;
    typedef typename T* pointer;
    typedef const typename T* const_pointer;
    typedef typename T* pointer;
    typedef const typename T* const_pointer;
    typedef typename T* iterator;
    typedef const typename T* const_iterator;
    typedef SSTL_NAMESPACE::reverse_iterator<iterator> reverse_iterator;
    typedef SSTL_NAMESPACE::reverse_iterator<const_iterator> const_reverse_iterator;

    vector()
        : _allocator()
    {}

    explicit vector(size_type n)
        : _allocator()
    {
        resize(n);
    }

    vector(size_type n, const_reference v)
        : _allocator()
    {
        resize(n, v);
    }

    template
        <class Iter>
    vector(Iter first, Iter last)
        : _allocator()
    {
        SSTL_ASSERT(first <= last);
        _allocator.resize(static_cast<size_type>(last - first));
        iterator it = _allocator.begin();
        for ( ; first < last; ++first, ++it )
            *it = *first;
    }

    vector(const vector& x)
        : _allocator()
    {

    }

    ~vector()
    {
        _destroy_items(begin(), end());
    }

    iterator begin() {return _allocator.begin();}
    iterator end()   {return _allocator.end();}

    const_iterator begin() const {return _allocator.cbegin();}
    const_iterator end() const   {return _allocator.cend();}

    const_iterator cbegin() const {return _allocator.cbegin();}
    const_iterator cend() const   {return _allocator.cend();}

    reverse_iterator rbegin() {return reverse_iterator(_allocator.end());}
    reverse_iterator rend()   {return reverse_iterator(_allocator.begin());}

    const_reverse_iterator rbegin() const {return const_reverse_iterator(_allocator.cend());}
    const_reverse_iterator rend() const   {return const_reverse_iterator(_allocator.cbegin());}

    const_reverse_iterator crbegin() const {return const_reverse_iterator(_allocator.cend());}
    const_reverse_iterator crend() const   {return const_reverse_iterator(_allocator.cbegin());}

    char& front()
    {
        SSTL_ASSERT(!empty());
        return *begin();
    }
    const char& front() const
    {
        SSTL_ASSERT(!empty());
        return *cbegin();
    }

    char& back()
    {
        SSTL_ASSERT(!empty());
        return *(end() - 1);
    }
    const char& back() const
    {
        SSTL_ASSERT(!empty());
        return *(cend() - 1);
    }

    // In the standard max_size is not static
    static SSTL_CONSTEXPR size_type max_size()
    {
        return numeric_limits<difference_type>::max(); //  // difference_type, not size_type because this is because difference_type should always work between two positions
    }

    size_type size() const
    {
        return static_cast<size_type>(_allocator.size());
    }

    bool empty() const
    {
        return _allocator.size() == 0;
    }

    size_type capacity() const
    {
        return static_cast<size_type>(_allocator.capacity());
    }

    void reserve(size_type n)
    {
        _allocator.reserve(n);
    }

    void shrink_to_fit()
    {
        _allocator.shrink_to_fit();
    }

    vector& operator=(const vector& v)
    {

        return *this;
    }

    template
        <class Iter>
    void assign(Iter first, Iter last)
    {
        SSTL_ASSERT(first <= last);
        _destroy_items(begin(), end());
        _allocator.resize(last - first);
        _copy_items(begin(), first, last);
    }

    void assign(size_type n, const_reference v)
    {

    }

    allocator_type& get_allocator()
    {
        return _allocator;
    }
    const allocator_type& get_allocator() const
    {
        return _allocator;
    }

    reference       operator[](size_type n)       {return *static_cast<pointer>(_allocator.item(n));}
    const_reference operator[](size_type n) const {return *static_cast<pointer>(_allocator.item(n));}
    reference       at(size_type n)               {return *static_cast<pointer>(_allocator.item(n));}
    const_reference at(size_type n) const         {return *static_cast<pointer>(_allocator.item(n));}

    void push_back(const_reference v)
    {
        _allocator.resize(size() + 1);
    }

    void pop_back()
    {
        SSTL_ASSERT(!empty());
        _destroy_item(end() - 1);
        _allocator.resize(size() - 1);
    }

    iterator insert(const_iterator n, const_reference v)
    {

    }

    template
        <class Iter>
    iterator insert(const_iterator n, Iter first, Iter last)
    {

    }

    iterator erase(const_iterator where)
    {

    }

    iterator erase(const_iterator first, const_iterator last)
    {
        SSTL_ASSERT(first <= last);
        _destroy_items(first, last);
        _allocator.erase(begin() - size() - (last - first));
    }

    void clear()
    {
        _destroy_items(begin(), end());
        // let the allocator destructor clear the space
    }

    void resize(size_type new_size);
    void resize(size_type new_size, const_reference v);

    void swap(vector&);

private:

    static void _destroy_item(const_iterator it)
    {
        (*it).T::~T();
    }

    static void _destroy_items(const_iterator first, const_iterator last)
    {
        for (; first < last; ++first)
            _destroy_item(first);
    }

private:

    typename A _allocator;
};

} // namespace

#endif
