// -*- C++ -*-
#ifndef _SSTL__VECTOR_INCLUDED
#define _SSTL__VECTOR_INCLUDED

#include "allocator"

namespace SSTL_NAMESPACE {

// Differences:
//   - non-standard allocator
//   - objects should be movable in memory

template
    <typename T, typename A = allocator_pod<T> >
class vector
{
public:
    typedef T value_type;
    typedef A allocator_type;
    typedef sstl_size_type size_type;
    typedef sstl_difference_type difference_type;
    typedef T& reference;
    typedef const T& const_reference;
    typedef T* pointer;
    typedef const T* const_pointer;
    typedef T* iterator;
    typedef const T* const_iterator;
    typedef SSTL_NAMESPACE::reverse_iterator<iterator> reverse_iterator;
    typedef SSTL_NAMESPACE::reverse_iterator<const_iterator> const_reverse_iterator;

    vector()
        : _allocator()
    {}

    explicit vector(size_type n)
        : _allocator()
    {
        resize(n);
    }

    vector(size_type n, const_reference v)
        : _allocator()
    {
        assign(n, v);
    }

    vector(const_iterator first, const_iterator last)
        : _allocator()
    {
        assign(first, last);
    }

    vector(iterator first, iterator last)
        : _allocator()
    {
        assign(first, last);
    }

    template
        <class Iter>
    vector(Iter first, Iter last)
        : _allocator()
    {
        assign(first, last);
    }

    vector(const vector& x)
        : _allocator()
    {
        operator=(x);
    }

    ~vector()
    {
        clear();
    }

    vector& operator=(const vector& v)
    {
        _allocator.operator=(v);
        return *this;
    }

    bool operator==(const vector& v) const {return _allocator.operator==(v);}
    bool operator!=(const vector& v) const {return _allocator.operator!=(v);}
    bool operator< (const vector& v) const {return _allocator.operator<(v);}
    bool operator> (const vector& v) const {return _allocator.operator>(v);}
    bool operator<=(const vector& v) const {return _allocator.operator<=(v);}
    bool operator>=(const vector& v) const {return _allocator.operator>=(v);}

    iterator begin() {return _allocator.begin();}
    iterator end()   {return _allocator.end();}

    const_iterator begin() const {return _allocator.cbegin();}
    const_iterator end() const   {return _allocator.cend();}

    const_iterator cbegin() const {return _allocator.cbegin();}
    const_iterator cend() const   {return _allocator.cend();}

    reverse_iterator rbegin() {return reverse_iterator(_allocator.end());}
    reverse_iterator rend()   {return reverse_iterator(_allocator.begin());}

    const_reverse_iterator rbegin() const {return const_reverse_iterator(_allocator.cend());}
    const_reverse_iterator rend() const   {return const_reverse_iterator(_allocator.cbegin());}

    const_reverse_iterator crbegin() const {return const_reverse_iterator(_allocator.cend());}
    const_reverse_iterator crend() const   {return const_reverse_iterator(_allocator.cbegin());}

    reference front()
    {
        SSTL_ASSERT(!empty());
        return *_allocator.begin();
    }
    const_reference front() const
    {
        SSTL_ASSERT(!empty());
        return *_allocator.cbegin();
    }

    reference back()
    {
        SSTL_ASSERT(!empty());
        return *(_allocator.end() - 1);
    }
    const_reference back() const
    {
        SSTL_ASSERT(!empty());
        return *(_allocator.cend() - 1);
    }

    pointer       data()       {return _allocator.begin();}
    const_pointer data() const {return _allocator.cbegin();}

    /// Maximum possible size of the vector, as determined by the limits of the involved types
    ///
    /// Different from C++ standard in SSTL this method is static, callable without instance.
    /// The real maximum size can be limited by the available memory.
    ///
    static SSTL_CONSTEXPR size_type max_size() {return allocator_type::max_size();}

    bool      empty()    const {return _allocator.size() == 0;}
    size_type size()     const {return static_cast<size_type>(_allocator.size());}
    size_type capacity() const {return static_cast<size_type>(_allocator.capacity());}

    void reserve(size_type n) {_allocator.reserve(n);}
    void shrink_to_fit()      {_allocator.shrink_to_fit();}

    void assign(const_iterator first, const_iterator last)
    {
        _iterator.assign(first, last);
    }

    void assign(iterator first, iterator last)
    {
        _iterator.assign(first, last);
    }

    template
        <class Iter>
    void assign(Iter first, Iter last)
    {
        _iterator.assign(first, last);
    }

    void assign(size_type n, const_reference v)
    {

    }

    allocator_type&       get_allocator()      {return _allocator;}
    const allocator_type& get_allocator() const{return _allocator;}

    reference       operator[](size_type n)       {return _allocator.at(n);}
    const_reference operator[](size_type n) const {return _allocator.at(n);}

    ///@{
    /// Access vector element by index.
    ///
    /// Different from standard, the behavior is the same as operator[],
    /// no exception is thrown but there is a debug check.
    ///
    reference       at(size_type n)               {return _allocator.at(n);}
    const_reference at(size_type n) const         {return _allocator.at(n);}
    ///@}

    void push_back(const_reference v)
    {
        *_allocator.append_uninitialized(1) = v;
    }

    void pop_back()
    {
        SSTL_ASSERT(!empty());
        _allocator.erase(size() - 1);
    }

    iterator insert(const_iterator pos, const_reference v)
    {

    }

    iterator insert(const_iterator pos, size_type count, const_reference v)
    {

    }

    template
        <class Iter>
    iterator insert(const_iterator pos, Iter first, Iter last)
    {

    }

    iterator erase(const_iterator where)
    {

    }

    iterator erase(const_iterator first, const_iterator last)
    {
        SSTL_ASSERT(first <= last);
        _destroy_items(first, last);
        _allocator.erase(begin() - size() - (last - first));
    }

    void clear() {_allocator.clear();}

    void resize(size_type new_size);
    void resize(size_type new_size, const_reference v);

    void swap(vector& v) {_allocator.swap(v);}

private:

    allocator_type _allocator;
};

} // namespace

#endif
