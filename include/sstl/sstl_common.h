#ifndef _SSTL__SSTL_COMMON_INCLUDED
#define _SSTL__SSTL_COMMON_INCLUDED

#include <memory.h>
#include <malloc.h>
#include <time.h>
#include <assert.h>
//#include <string.h>
//#include <stdarg.h>
//#include <stdlib.h>
//#include <stdio.h>
//#include <ctype.h>
#include <limits.h>

#include "sstl_version.h"
#include "sstl_config.h"
#include "sstl_types.h"

#if defined(_WIN32)  // Generic Windows, both 32 and 64
    #if !defined(_WINDOWS_) // avoid relying on WIN32_LEAN_AND_MEAN define
       #define WIN32_LEAN_AND_MEAN
       #include <windows.h>
    #endif
#else
    #include <unistd.h>
#endif

#if !defined(SSTL_NAMESPACE)
    #define SSTL_NAMESPACE sstl
#endif

#if !defined(SSTL_STATIC_ASSERT)
    #define SSTL_STATIC_ASSERT(expression, str)  typedef char SSTL_MACRO_CONCATENATE(_sstl__static_assert_, __LINE__) [((expression) && (str)) ? 1 : -1]
#endif

#if !defined(SSTL_ASSERT)
    #define SSTL_ASSERT(expression)  assert(expression)
#endif

#define SSTL_USE(variable)  (variable)

/// Hide a class member that would otherwise be generated by the compiler.
/// This is a C++11 compatibility macro.
///
#define SSTL_MEMBER_DELETE

/// Macro to mark constant expression, function with no side effects.
/// This is a C++11 compatibility macro.
///
#define SSTL_CONSTEXPR

/// Macro to mark override virtual function.
/// This is a C++11 compatibility macro.
///
#define SSTL_OVERRIDE

#endif
