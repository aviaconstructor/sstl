// -*- C++ -*-
#ifndef _SSTL__TYPE_TRAITS
#define _SSTL__TYPE_TRAITS

#include "sstl_common.h"

namespace SSTL_NAMESPACE {

template
    <class T, T v>
struct integral_constant
{
    static SSTL_CONSTEXPR const T value = v;
    typedef T value_type;
    typedef integral_constant type;
    SSTL_CONSTEXPR operator value_type() const {return v;}
};

template <class T, T v> const _Tp integral_constant<_Tp, __v>::value;

typedef integral_constant<bool, true>  true_type;
typedef integral_constant<bool, false> false_type;

template <bool _Bp, class _If, class _Then> struct conditional {typedef _If type;};
template <          class _If, class _Then> struct conditional<false, _If, _Then> {typedef _Then type;};

// is_array

template <class _Tp> struct is_array : public false_type {};
template <class _Tp> struct is_array<_Tp[]> : public true_type {};
template <class _Tp, size_t _Np> struct is_array<_Tp[_Np]> : public true_type {};

// is_pointer

template <class _Tp> struct __is_pointer       : public false_type {};
template <class _Tp> struct __is_pointer<_Tp*> : public true_type {};

template <class _Tp> struct is_pointer : public __is_pointer<typename remove_cv<_Tp>::type> {};

// is_same

template <class _Tp, class _Up> struct is_same           : public false_type {};
template <class _Tp>            struct is_same<_Tp, _Tp> : public true_type {};

}

#endif
